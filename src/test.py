# # from src.dataPreparation import outputMapping

# # label = 1
# # test = outputMapping(ds='fmnist', label=label)
# # string = "{\"label\":"+"\""+test+"\"}"

# # print(string)

# """ import numpy as np
# import torch
# import src.helpers as helpers
# import src.dataPreparation as prep

# paths = helpers.paths()
# prefix = "M_cnn_D_fmnist"  # "M_" + FLAGS.model + "_D_" + FLAGS.dataset
# filepath = paths.get_path_file_model(prefix)
# model = helpers.get_object_from_pkl(filepath)

# input = [0,0,0,0,0,0,0,9,8,0,0,34,29,7,0,11,24,0,0,3,3,1,0,1,1,0,0,0,0,0,4,0,0,1,0,0,0,0,0,44,88,99,122,123,80,0,0,0,0,1,1,1,0,0,0,0,0,0,1,2,0,0,0,3,46,174,249,67,0,94,210,61,14,212,157,37,0,0,0,0,1,0,0,0,0,0,2,2,0,23,168,206,242,239,238,214,125,61,113,74,133,236,238,236,203,184,20,0,1,0,0,0,0,0,1,0,0,175,245,223,207,205,206,216,255,237,251,232,223,212,200,205,216,249,173,0,0,2,0,0,0,0,7,0,53,225,201,197,200,201,206,199,197,185,194,204,232,226,249,219,194,205,229,33,0,1,0,0,0,0,1,0,133,223,208,192,195,233,226,216,191,210,188,236,186,0,50,234,207,208,231,133,0,0,0,0,0,0,0,0,216,218,216,194,229,172,64,219,201,200,200,247,68,72,54,165,237,212,219,226,0,0,0,0,0,0,0,50,221,207,220,211,207,165,138,205,192,191,190,232,119,113,67,173,237,217,208,221,29,0,0,0,0,0,0,131,216,200,219,207,212,231,226,193,214,224,206,203,230,122,112,234,224,214,204,224,123,0,0,0,0,0,0,195,212,204,211,203,205,200,184,213,162,138,193,207,203,231,245,208,220,211,203,219,179,0,0,0,0,0,8,185,191,218,233,219,201,221,213,246,114,127,80,129,232,198,218,207,236,227,220,216,172,21,0,0,0,0,21,4,5,64,160,224,224,144,187,197,211,207,186,192,210,212,218,225,236,177,106,56,28,1,0,0,0,0,1,1,0,2,0,116,252,96,120,51,73,70,123,79,76,64,162,252,118,1,3,0,4,2,0,0,0,0,0,0,0,0,0,115,226,145,170,155,165,161,159,125,175,140,174,236,95,0,2,2,0,0,0,0,0,0,0,0,1,2,0,131,225,204,217,221,220,217,224,231,226,237,203,237,102,0,4,2,1,2,0,0,0,0,1,1,0,3,0,135,223,201,199,194,198,195,198,192,203,199,207,231,112,0,4,0,0,0,0,0,0,0,1,1,0,1,0,134,223,199,206,199,201,200,203,206,207,210,206,227,119,0,3,0,0,1,0,0,0,0,0,0,0,1,0,139,223,198,204,200,201,200,201,204,206,208,206,229,128,0,4,0,0,0,0,0,0,0,0,0,0,1,0,145,223,195,205,201,201,200,204,204,206,211,205,230,139,0,2,0,0,0,0,0,0,0,1,0,1,0,0,157,221,194,204,204,201,201,203,205,208,211,204,230,148,0,2,0,1,1,0,0,0,0,1,1,1,0,0,166,220,194,203,203,205,203,203,206,207,212,204,230,157,0,2,1,1,1,0,0,0,0,0,0,0,0,0,171,221,195,206,200,199,203,203,205,206,207,204,226,181,0,0,0,0,0,0,0,0,0,0,0,1,0,0,165,224,197,201,208,199,204,205,207,210,213,207,229,187,0,1,2,0,0,0,0,0,0,0,0,0,0,0,128,201,203,201,207,211,203,205,206,210,213,205,225,191,0,0,2,0,0,0,0,0,0,0,0,1,1,0,141,201,191,188,194,187,187,191,193,195,199,199,218,161,0,0,0,0,0,0,0,0,0,0,0,0,1,0,212,240,213,239,233,239,231,232,236,242,245,224,245,234,0,3,0,0,0,0,0,0,0,0,0,0,0,0,37,69,94,123,127,138,138,142,145,135,125,103,87,56,0,0,0,0,0,0,0]
# dataloader = prep.ld(ds='fmnist',batchsize=1,reduced=True)
# td = dataloader['test']
# x_test = 0
# y_test = -1
# for i,(x,y) in enumerate(td):
#     if i == 7:
#         x_test = x
#         y_test = y
#     else:
#         pass

# arr = np.array(input, dtype='f')/255
# t = torch.from_numpy(arr)
# t_new = t.reshape(shape=(1, 1, 28, 28))

# label = model(t_new)
# print(label.max(1))
# print(y_test) """


# import src.helpers as helpers
# import src.dataPreparation as prep


# # input = [0,0,0,0,0,0,0,9,8,0,0,34,29,7,0,11,24,0,0,3,3,1,0,1,1,0,0,0,0,0,4,0,0,1,0,0,0,0,0,44,88,99,122,123,80,0,0,0,0,1,1,1,0,0,0,0,0,0,1,2,0,0,0,3,46,174,249,67,0,94,210,61,14,212,157,37,0,0,0,0,1,0,0,0,0,0,2,2,0,23,168,206,242,239,238,214,125,61,113,74,133,236,238,236,203,184,20,0,1,0,0,0,0,0,1,0,0,175,245,223,207,205,206,216,255,237,251,232,223,212,200,205,216,249,173,0,0,2,0,0,0,0,7,0,53,225,201,197,200,201,206,199,197,185,194,204,232,226,249,219,194,205,229,33,0,1,0,0,0,0,1,0,133,223,208,192,195,233,226,216,191,210,188,236,186,0,50,234,207,208,231,133,0,0,0,0,0,0,0,0,216,218,216,194,229,172,64,219,201,200,200,247,68,72,54,165,237,212,219,226,0,0,0,0,0,0,0,50,221,207,220,211,207,165,138,205,192,191,190,232,119,113,67,173,237,217,208,221,29,0,0,0,0,0,0,131,216,200,219,207,212,231,226,193,214,224,206,203,230,122,112,234,224,214,204,224,123,0,0,0,0,0,0,195,212,204,211,203,205,200,184,213,162,138,193,207,203,231,245,208,220,211,203,219,179,0,0,0,0,0,8,185,191,218,233,219,201,221,213,246,114,127,80,129,232,198,218,207,236,227,220,216,172,21,0,0,0,0,21,4,5,64,160,224,224,144,187,197,211,207,186,192,210,212,218,225,236,177,106,56,28,1,0,0,0,0,1,1,0,2,0,116,252,96,120,51,73,70,123,79,76,64,162,252,118,1,3,0,4,2,0,0,0,0,0,0,0,0,0,115,226,145,170,155,165,161,159,125,175,140,174,236,95,0,2,2,0,0,0,0,0,0,0,0,1,2,0,131,225,204,217,221,220,217,224,231,226,237,203,237,102,0,4,2,1,2,0,0,0,0,1,1,0,3,0,135,223,201,199,194,198,195,198,192,203,199,207,231,112,0,4,0,0,0,0,0,0,0,1,1,0,1,0,134,223,199,206,199,201,200,203,206,207,210,206,227,119,0,3,0,0,1,0,0,0,0,0,0,0,1,0,139,223,198,204,200,201,200,201,204,206,208,206,229,128,0,4,0,0,0,0,0,0,0,0,0,0,1,0,145,223,195,205,201,201,200,204,204,206,211,205,230,139,0,2,0,0,0,0,0,0,0,1,0,1,0,0,157,221,194,204,204,201,201,203,205,208,211,204,230,148,0,2,0,1,1,0,0,0,0,1,1,1,0,0,166,220,194,203,203,205,203,203,206,207,212,204,230,157,0,2,1,1,1,0,0,0,0,0,0,0,0,0,171,221,195,206,200,199,203,203,205,206,207,204,226,181,0,0,0,0,0,0,0,0,0,0,0,1,0,0,165,224,197,201,208,199,204,205,207,210,213,207,229,187,0,1,2,0,0,0,0,0,0,0,0,0,0,0,128,201,203,201,207,211,203,205,206,210,213,205,225,191,0,0,2,0,0,0,0,0,0,0,0,1,1,0,141,201,191,188,194,187,187,191,193,195,199,199,218,161,0,0,0,0,0,0,0,0,0,0,0,0,1,0,212,240,213,239,233,239,231,232,236,242,245,224,245,234,0,3,0,0,0,0,0,0,0,0,0,0,0,0,37,69,94,123,127,138,138,142,145,135,125,103,87,56,0,0,0,0,0,0,0]
# # arr = np.array(input, dtype='f')/255


# paths = helpers.paths()
# prefix = "M_cnn_D_fmnist"  # "M_" + FLAGS.model + "_D_" + FLAGS.dataset
# filepath = paths.get_path_file_model(prefix)
# # model = helpers.get_object_from_pkl(filepath)

# # model_input = helpers.convertWSRequestToTensor(input)
# # prediction = model(model_input)
# label = 1
# string = "{\"label\":"+prep.outputMapping(ds='fmnist', label=label)+"}"

# print(string)
import sys
import torch
import numpy as np
#print("Pfad:",sys.path)
#print("packages",sys.__package__)
#print("Cuda verf√ºgbar?",torch.cuda.is_available())
#x = torch.rand(5, 3)
#print(x)


#arr_r=np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,41,97,87,73,20,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,166,156,146,184,186,97,0,0,15,31,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,18,159,150,143,140,145,189,87,87,56,77,117,37,39,7,0,0,0,0,0,0,0,0,0,1,0,1,0,6,150,156,159,154,160,167,147,114,122,85,116,117,73,64,0,0,0,0,0,0,0,0,0,0,0,2,0,0,170,155,157,166,179,186,174,103,89,154,92,95,106,20,0,0,0,0,0,0,0,0,0,1,0,1,0,0,167,164,172,195,203,205,193,156,79,113,175,56,102,16,0,0,0,0,0,0,0,0,0,0,0,1,0,0,171,166,166,180,159,150,223,109,92,61,63,124,66,8,0,0,0,0,0,0,0,0,0,0,2,2,0,0,143,161,160,150,138,156,200,142,70,141,121,78,51,0,0,0,0,1,1,1,0,1,3,1,0,0,0,49,167,159,169,145,164,169,154,162,255,218,198,146,16,0,0,0,0,2,3,2,1,0,0,0,1,25,100,126,161,147,118,112,145,126,143,141,191,207,185,156,10,0,1,0,0,0,0,0,0,1,20,69,114,150,145,121,106,160,210,171,155,201,208,196,224,220,210,164,2,0,3,0,0,6,46,74,98,117,133,141,138,130,128,135,133,112,146,209,234,218,172,160,172,183,167,180,80,0,0,1,106,142,143,137,136,136,140,138,137,136,131,133,135,146,136,141,165,142,161,171,172,179,167,177,157,0,0,107,154,135,133,135,138,148,146,143,141,145,142,152,148,147,160,177,156,137,177,166,154,157,175,176,127,0,21,117,140,155,161,177,170,166,167,160,160,167,159,166,174,176,181,196,175,185,204,194,203,194,179,180,133,0,45,140,114,123,126,143,155,161,189,201,207,210,194,196,198,189,188,180,146,148,148,145,152,155,156,156,183,41,13,143,166,155,155,151,137,126,132,133,141,143,142,146,148,148,145,143,155,161,166,167,164,161,156,148,159,12,0,1,92,159,176,191,201,201,195,193,190,185,185,185,183,184,188,194,190,190,188,186,181,167,162,156,174,18,0,0,0,0,17,51,80,90,111,116,124,132,141,142,140,140,136,130,123,124,123,119,119,121,121,102,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
#arr_g=np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,41,97,87,73,20,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,166,156,146,184,186,97,0,0,15,31,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,18,159,150,143,140,145,189,87,87,56,77,117,37,39,7,0,0,0,0,0,0,0,0,0,1,0,1,0,6,150,156,159,154,160,167,147,114,122,85,116,117,73,64,0,0,0,0,0,0,0,0,0,0,0,2,0,0,170,155,157,166,179,186,174,103,89,154,92,95,106,20,0,0,0,0,0,0,0,0,0,1,0,1,0,0,167,164,172,195,203,205,193,156,79,113,175,56,102,16,0,0,0,0,0,0,0,0,0,0,0,1,0,0,171,166,166,180,159,150,223,109,92,61,63,124,66,8,0,0,0,0,0,0,0,0,0,0,2,2,0,0,143,161,160,150,138,156,200,142,70,141,121,78,51,0,0,0,0,1,1,1,0,1,3,1,0,0,0,49,167,159,169,145,164,169,154,162,255,218,198,146,16,0,0,0,0,2,3,2,1,0,0,0,1,25,100,126,161,147,118,112,145,126,143,141,191,207,185,156,10,0,1,0,0,0,0,0,0,1,20,69,114,150,145,121,106,160,210,171,155,201,208,196,224,220,210,164,2,0,3,0,0,6,46,74,98,117,133,141,138,130,128,135,133,112,146,209,234,218,172,160,172,183,167,180,80,0,0,1,106,142,143,137,136,136,140,138,137,136,131,133,135,146,136,141,165,142,161,171,172,179,167,177,157,0,0,107,154,135,133,135,138,148,146,143,141,145,142,152,148,147,160,177,156,137,177,166,154,157,175,176,127,0,21,117,140,155,161,177,170,166,167,160,160,167,159,166,174,176,181,196,175,185,204,194,203,194,179,180,133,0,45,140,114,123,126,143,155,161,189,201,207,210,194,196,198,189,188,180,146,148,148,145,152,155,156,156,183,41,13,143,166,155,155,151,137,126,132,133,141,143,142,146,148,148,145,143,155,161,166,167,164,161,156,148,159,12,0,1,92,159,176,191,201,201,195,193,190,185,185,185,183,184,188,194,190,190,188,186,181,167,162,156,174,18,0,0,0,0,17,51,80,90,111,116,124,132,141,142,140,140,136,130,123,124,123,119,119,121,121,102,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
#arr_b=np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,41,97,87,73,20,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,166,156,146,184,186,97,0,0,15,31,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,18,159,150,143,140,145,189,87,87,56,77,117,37,39,7,0,0,0,0,0,0,0,0,0,1,0,1,0,6,150,156,159,154,160,167,147,114,122,85,116,117,73,64,0,0,0,0,0,0,0,0,0,0,0,2,0,0,170,155,157,166,179,186,174,103,89,154,92,95,106,20,0,0,0,0,0,0,0,0,0,1,0,1,0,0,167,164,172,195,203,205,193,156,79,113,175,56,102,16,0,0,0,0,0,0,0,0,0,0,0,1,0,0,171,166,166,180,159,150,223,109,92,61,63,124,66,8,0,0,0,0,0,0,0,0,0,0,2,2,0,0,143,161,160,150,138,156,200,142,70,141,121,78,51,0,0,0,0,1,1,1,0,1,3,1,0,0,0,49,167,159,169,145,164,169,154,162,255,218,198,146,16,0,0,0,0,2,3,2,1,0,0,0,1,25,100,126,161,147,118,112,145,126,143,141,191,207,185,156,10,0,1,0,0,0,0,0,0,1,20,69,114,150,145,121,106,160,210,171,155,201,208,196,224,220,210,164,2,0,3,0,0,6,46,74,98,117,133,141,138,130,128,135,133,112,146,209,234,218,172,160,172,183,167,180,80,0,0,1,106,142,143,137,136,136,140,138,137,136,131,133,135,146,136,141,165,142,161,171,172,179,167,177,157,0,0,107,154,135,133,135,138,148,146,143,141,145,142,152,148,147,160,177,156,137,177,166,154,157,175,176,127,0,21,117,140,155,161,177,170,166,167,160,160,167,159,166,174,176,181,196,175,185,204,194,203,194,179,180,133,0,45,140,114,123,126,143,155,161,189,201,207,210,194,196,198,189,188,180,146,148,148,145,152,155,156,156,183,41,13,143,166,155,155,151,137,126,132,133,141,143,142,146,148,148,145,143,155,161,166,167,164,161,156,148,159,12,0,1,92,159,176,191,201,201,195,193,190,185,185,185,183,184,188,194,190,190,188,186,181,167,162,156,174,18,0,0,0,0,17,51,80,90,111,116,124,132,141,142,140,140,136,130,123,124,123,119,119,121,121,102,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

#new_arr = np.array([arr_r,arr_g,arr_b])
#print(new_arr.shape)

# print([255]*784)